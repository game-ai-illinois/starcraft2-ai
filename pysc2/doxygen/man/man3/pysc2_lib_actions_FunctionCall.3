.TH "pysc2.lib.actions.FunctionCall" 3 "Fri Sep 28 2018" "UIUCscaipy2" \" -*- nroff -*-
.ad l
.nh
.SH NAME
pysc2.lib.actions.FunctionCall
.SH SYNOPSIS
.br
.PP
.PP
Inherits namedtuple, function, and arguments\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "def \fBinit_with_validation\fP (cls, function, arguments)"
.br
.ti -1c
.RI "def \fBall_arguments\fP (cls, function, arguments)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.PP
.nf
Represents a function call action.

Attributes:
  function: Store the function id, eg 2 for select_point.
  arguments: The list of arguments for that function, each being a list of
      ints. For select_point this could be: [[0], [23, 38]].

.fi
.PP
 
.SH "Member Function Documentation"
.PP 
.SS "def pysc2\&.lib\&.actions\&.FunctionCall\&.all_arguments ( cls,  function,  arguments)"

.PP
.nf
Helper function for creating `FunctionCall`s with `Arguments`.

Args:
  function: The value to store for the action function.
  arguments: The values to store for the arguments of the action. Can either
be an `Arguments` object, a `dict`, or an iterable. If a `dict` or an
iterable is provided, the values will be unpacked into an `Arguments`
object.

Returns:
  A new `FunctionCall` instance.

.fi
.PP
 
.SS "def pysc2\&.lib\&.actions\&.FunctionCall\&.init_with_validation ( cls,  function,  arguments)"

.PP
.nf
Return a `FunctionCall` given some validation for the function and args.

Args:
  function: A function name or id, to be converted into a function id enum.
  arguments: An iterable of function arguments. Arguments that are enum
  types can be passed by name. Arguments that only take one value (ie
  not a point) don't need to be wrapped in a list.

Returns:
  A new `FunctionCall` instance.

Raises:
  KeyError: if the enum name doesn't exist.
  ValueError: if the enum id doesn't exist.

.fi
.PP
 

.SH "Author"
.PP 
Generated automatically by Doxygen for UIUCscaipy2 from the source code\&.
