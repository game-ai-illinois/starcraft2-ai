<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="run__parallel__test_8py" kind="file" language="Python">
    <compoundname>run_parallel_test.py</compoundname>
    <innerclass refid="classpysc2_1_1lib_1_1run__parallel__test_1_1_barrier" prot="public">pysc2::lib::run_parallel_test::Barrier</innerclass>
    <innerclass refid="classpysc2_1_1lib_1_1run__parallel__test_1_1_run_parallel_test" prot="public">pysc2::lib::run_parallel_test::RunParallelTest</innerclass>
    <innernamespace refid="namespacepysc2_1_1lib_1_1run__parallel__test">pysc2::lib::run_parallel_test</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespacepysc2_1_1lib_1_1run__parallel__test" refkind="compound"><highlight class="comment">#!/usr/bin/python</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Copyright<sp/>2017<sp/>Google<sp/>Inc.<sp/>All<sp/>Rights<sp/>Reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">#<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">#<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">#<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS-IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">#<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">#<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">#<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;&quot;&quot;Tests<sp/>for<sp/>lib.run_parallel.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>__future__<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>absolute_import</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>__future__<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>division</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>__future__<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>print_function</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>threading</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>absl.testing<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>absltest</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacepysc2_1_1lib" kindref="compound">pysc2.lib</ref><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>run_parallel</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="classpysc2_1_1lib_1_1run__parallel__test_1_1_barrier" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpysc2_1_1lib_1_1run__parallel__test_1_1_barrier" kindref="compound">Barrier</ref>(object):</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classpysc2_1_1lib_1_1run__parallel__test_1_1_barrier_1a77e987f83cb0038718cddacc812e063c" kindref="member">__init__</ref>(self,<sp/>n):</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classpysc2_1_1lib_1_1run__parallel__test_1_1_barrier_1ac8c9432b90c8b37ec7e5f0b5db77a473" kindref="member">n</ref><sp/>=<sp/>n</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classpysc2_1_1lib_1_1run__parallel__test_1_1_barrier_1aa4e9eeac4fac8f01df640fb2b881bf6d" kindref="member">count</ref><sp/>=<sp/>0</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classpysc2_1_1lib_1_1run__parallel__test_1_1_barrier_1a0439c79d387511bcea1606fea651388e" kindref="member">cond</ref><sp/>=<sp/>threading.Condition()</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classpysc2_1_1lib_1_1run__parallel__test_1_1_barrier_1a0d5f345a8b99d03145c5c742e0f197f7" kindref="member">wait</ref>(self):</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classpysc2_1_1lib_1_1run__parallel__test_1_1_barrier_1a0439c79d387511bcea1606fea651388e" kindref="member">cond</ref>.acquire()</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>me<sp/>=<sp/>self.<ref refid="classpysc2_1_1lib_1_1run__parallel__test_1_1_barrier_1aa4e9eeac4fac8f01df640fb2b881bf6d" kindref="member">count</ref></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classpysc2_1_1lib_1_1run__parallel__test_1_1_barrier_1aa4e9eeac4fac8f01df640fb2b881bf6d" kindref="member">count</ref><sp/>+=<sp/>1</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classpysc2_1_1lib_1_1run__parallel__test_1_1_barrier_1aa4e9eeac4fac8f01df640fb2b881bf6d" kindref="member">count</ref><sp/>&lt;<sp/>self.<ref refid="classpysc2_1_1lib_1_1run__parallel__test_1_1_barrier_1ac8c9432b90c8b37ec7e5f0b5db77a473" kindref="member">n</ref>:</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classpysc2_1_1lib_1_1run__parallel__test_1_1_barrier_1a0439c79d387511bcea1606fea651388e" kindref="member">cond</ref>.<ref refid="classpysc2_1_1lib_1_1run__parallel__test_1_1_barrier_1a0d5f345a8b99d03145c5c742e0f197f7" kindref="member">wait</ref>()</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classpysc2_1_1lib_1_1run__parallel__test_1_1_barrier_1aa4e9eeac4fac8f01df640fb2b881bf6d" kindref="member">count</ref><sp/>=<sp/>0</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classpysc2_1_1lib_1_1run__parallel__test_1_1_barrier_1a0439c79d387511bcea1606fea651388e" kindref="member">cond</ref>.notify_all()</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classpysc2_1_1lib_1_1run__parallel__test_1_1_barrier_1a0439c79d387511bcea1606fea651388e" kindref="member">cond</ref>.release()</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>me</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classpysc2_1_1lib_1_1run__parallel__test_1_1_barrier_1a5216f6a490702f42fcead15daf544589" kindref="member">clear</ref>(self):</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classpysc2_1_1lib_1_1run__parallel__test_1_1_barrier_1a0439c79d387511bcea1606fea651388e" kindref="member">cond</ref>.acquire()</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classpysc2_1_1lib_1_1run__parallel__test_1_1_barrier_1a0439c79d387511bcea1606fea651388e" kindref="member">cond</ref>.notify_all()</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classpysc2_1_1lib_1_1run__parallel__test_1_1_barrier_1a0439c79d387511bcea1606fea651388e" kindref="member">cond</ref>.release()</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacepysc2_1_1lib_1_1run__parallel__test_1ae7dde1edcb45cf14df1fd863e91f2080" kindref="member">bad</ref>():</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>ValueError()</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="classpysc2_1_1lib_1_1run__parallel__test_1_1_run_parallel_test" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpysc2_1_1lib_1_1run__parallel__test_1_1_run_parallel_test" kindref="compound">RunParallelTest</ref>(absltest.TestCase):</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classpysc2_1_1lib_1_1run__parallel__test_1_1_run_parallel_test_1a9ee50abb779e56b37631c22327a4e496" kindref="member">test_returns_expected_values</ref>(self):</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>pool<sp/>=<sp/><ref refid="classpysc2_1_1lib_1_1run__parallel_1_1_run_parallel" kindref="compound">run_parallel.RunParallel</ref>()</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>pool.run([int])</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertListEqual(out,<sp/>[0])</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>pool.run([</highlight><highlight class="keyword">lambda</highlight><highlight class="normal">:<sp/>1,<sp/></highlight><highlight class="keyword">lambda</highlight><highlight class="normal">:<sp/>2,<sp/></highlight><highlight class="keyword">lambda</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&quot;asdf&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">lambda</highlight><highlight class="normal">:<sp/>{1:<sp/>2}])</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertListEqual(out,<sp/>[1,<sp/>2,<sp/></highlight><highlight class="stringliteral">&quot;asdf&quot;</highlight><highlight class="normal">,<sp/>{1:<sp/>2}])</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classpysc2_1_1lib_1_1run__parallel__test_1_1_run_parallel_test_1adb895ed2bebfa207517b06e8e7632776" kindref="member">test_run_in_parallel</ref>(self):</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>=<sp/><ref refid="classpysc2_1_1lib_1_1run__parallel__test_1_1_barrier" kindref="compound">Barrier</ref>(3)</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>pool<sp/>=<sp/><ref refid="classpysc2_1_1lib_1_1run__parallel_1_1_run_parallel" kindref="compound">run_parallel.RunParallel</ref>()</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>pool.run([b.wait,<sp/>b.wait,<sp/>b.wait])</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertItemsEqual(out,<sp/>[0,<sp/>1,<sp/>2])</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classpysc2_1_1lib_1_1run__parallel__test_1_1_run_parallel_test_1a2a0625445818f5ca5a8c4c2e9a4c87c5" kindref="member">test_avoids_deadlock</ref>(self):</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>=<sp/><ref refid="classpysc2_1_1lib_1_1run__parallel__test_1_1_barrier" kindref="compound">Barrier</ref>(2)</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>pool<sp/>=<sp/><ref refid="classpysc2_1_1lib_1_1run__parallel_1_1_run_parallel" kindref="compound">run_parallel.RunParallel</ref>(timeout=2)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>with<sp/>self.assertRaises(ValueError):</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pool.run([int,<sp/>b.wait,<sp/>bad])</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Release<sp/>the<sp/>thread<sp/>waiting<sp/>on<sp/>the<sp/>barrier<sp/>so<sp/>the<sp/>process<sp/>can<sp/>exit<sp/>cleanly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>b.clear()</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classpysc2_1_1lib_1_1run__parallel__test_1_1_run_parallel_test_1ade5a57fb5693870e414687c016641b9c" kindref="member">test_exception</ref>(self):</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>pool<sp/>=<sp/><ref refid="classpysc2_1_1lib_1_1run__parallel_1_1_run_parallel" kindref="compound">run_parallel.RunParallel</ref>()</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>pool.run([</highlight><highlight class="keyword">lambda</highlight><highlight class="normal">:<sp/>1,<sp/>ValueError])</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(out[0],<sp/>1)</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertIsInstance(out[1],<sp/>ValueError)</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>with<sp/>self.assertRaises(ValueError):</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pool.run([bad])</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>with<sp/>self.assertRaises(ValueError):</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pool.run([int,<sp/>bad])</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classpysc2_1_1lib_1_1run__parallel__test_1_1_run_parallel_test_1a951bb84a715106116dc66f1ee6691479" kindref="member">test_partial</ref>(self):</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>pool<sp/>=<sp/><ref refid="classpysc2_1_1lib_1_1run__parallel_1_1_run_parallel" kindref="compound">run_parallel.RunParallel</ref>()</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>pool.run((max,<sp/>0,<sp/>i<sp/>-<sp/>2)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(5))</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertListEqual(out,<sp/>[0,<sp/>0,<sp/>0,<sp/>1,<sp/>2])</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>__name__<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;__main__&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>absltest.main()</highlight></codeline>
    </programlisting>
    <location file="lib/run_parallel_test.py"/>
  </compounddef>
</doxygen>
