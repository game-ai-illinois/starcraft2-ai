<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="named__array__test_8py" kind="file" language="Python">
    <compoundname>named_array_test.py</compoundname>
    <innerclass refid="classpysc2_1_1lib_1_1named__array__test_1_1_named_dict_test" prot="public">pysc2::lib::named_array_test::NamedDictTest</innerclass>
    <innerclass refid="classpysc2_1_1lib_1_1named__array__test_1_1_test_enum" prot="public">pysc2::lib::named_array_test::TestEnum</innerclass>
    <innerclass refid="classpysc2_1_1lib_1_1named__array__test_1_1_bad_enum" prot="public">pysc2::lib::named_array_test::BadEnum</innerclass>
    <innerclass refid="classpysc2_1_1lib_1_1named__array__test_1_1_test_named_tuple" prot="public">pysc2::lib::named_array_test::TestNamedTuple</innerclass>
    <innerclass refid="classpysc2_1_1lib_1_1named__array__test_1_1_bad_named_tuple" prot="public">pysc2::lib::named_array_test::BadNamedTuple</innerclass>
    <innerclass refid="classpysc2_1_1lib_1_1named__array__test_1_1_named_array_test" prot="public">pysc2::lib::named_array_test::NamedArrayTest</innerclass>
    <innernamespace refid="namespacepysc2_1_1lib_1_1named__array__test">pysc2::lib::named_array_test</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespacepysc2_1_1lib_1_1named__array__test" refkind="compound"><highlight class="comment">#!/usr/bin/python</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Copyright<sp/>2018<sp/>Google<sp/>Inc.<sp/>All<sp/>Rights<sp/>Reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">#<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">#<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">#<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS-IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">#<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">#<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">#<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;&quot;&quot;Tests<sp/>for<sp/>lib.named_array.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>__future__<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>absolute_import</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>__future__<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>division</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>__future__<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>print_function</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>collections</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>absl.testing<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>absltest</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>absl.testing<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>parameterized</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>enum</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>numpy<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>np</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacepysc2_1_1lib" kindref="compound">pysc2.lib</ref><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>named_array</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="classpysc2_1_1lib_1_1named__array__test_1_1_named_dict_test" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpysc2_1_1lib_1_1named__array__test_1_1_named_dict_test" kindref="compound">NamedDictTest</ref>(absltest.TestCase):</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classpysc2_1_1lib_1_1named__array__test_1_1_named_dict_test_1aa03b1f789100738ff34f6944d56d1c52" kindref="member">test_named_dict</ref>(self):</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>=<sp/><ref refid="classpysc2_1_1lib_1_1named__array_1_1_named_dict" kindref="compound">named_array.NamedDict</ref>(a=2,<sp/>b=(1,<sp/>2))</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(a[</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">],<sp/>a.a)</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(a[</highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">],<sp/>a.b)</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertIs(a[</highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">],<sp/>a.b)</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertNotEqual(a[</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">],<sp/>a.b)</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>a.c<sp/>=<sp/>3</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(a[</highlight><highlight class="stringliteral">&quot;c&quot;</highlight><highlight class="normal">],<sp/>3)</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="classpysc2_1_1lib_1_1named__array__test_1_1_test_enum" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpysc2_1_1lib_1_1named__array__test_1_1_test_enum" kindref="compound">TestEnum</ref>(enum.IntEnum):</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>a<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>b<sp/>=<sp/>1</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>c<sp/>=<sp/>2</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="classpysc2_1_1lib_1_1named__array__test_1_1_bad_enum" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpysc2_1_1lib_1_1named__array__test_1_1_bad_enum" kindref="compound">BadEnum</ref>(enum.IntEnum):</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>a<sp/>=<sp/>1</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>b<sp/>=<sp/>2</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>c<sp/>=<sp/>3</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="classpysc2_1_1lib_1_1named__array__test_1_1_test_named_tuple" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpysc2_1_1lib_1_1named__array__test_1_1_test_named_tuple" kindref="compound">TestNamedTuple</ref>(collections.namedtuple(</highlight><highlight class="stringliteral">&quot;TestNamedTuple&quot;</highlight><highlight class="normal">,<sp/>[</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;c&quot;</highlight><highlight class="normal">])):</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="classpysc2_1_1lib_1_1named__array__test_1_1_bad_named_tuple" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpysc2_1_1lib_1_1named__array__test_1_1_bad_named_tuple" kindref="compound">BadNamedTuple</ref>(collections.namedtuple(</highlight><highlight class="stringliteral">&quot;BadNamedTuple&quot;</highlight><highlight class="normal">,<sp/>[</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">])):</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="classpysc2_1_1lib_1_1named__array__test_1_1_named_array_test" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpysc2_1_1lib_1_1named__array__test_1_1_named_array_test" kindref="compound">NamedArrayTest</ref>(parameterized.TestCase):</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classpysc2_1_1lib_1_1named__array__test_1_1_named_array_test_1a73012d8abe25bb19ab3a25d942f0c882" kindref="member">assertArrayEqual</ref>(self,<sp/>a,<sp/>b):</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>np.testing.assert_array_equal(a,<sp/>b)</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>@parameterized.named_parameters(</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;none&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;none2&quot;</highlight><highlight class="normal">,<sp/>[</highlight><highlight class="keywordtype">None</highlight><highlight class="normal">]),</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;short_list&quot;</highlight><highlight class="normal">,<sp/>[</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">]),</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;long_list&quot;</highlight><highlight class="normal">,<sp/>[</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;c&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal">]),</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;long_list2&quot;</highlight><highlight class="normal">,<sp/>[[</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;c&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal">]]),</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;ints&quot;</highlight><highlight class="normal">,<sp/>[[1,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">,<sp/>3]]),</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;bad_enum&quot;</highlight><highlight class="normal">,<sp/>[BadEnum]),</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;bad_namedtuple&quot;</highlight><highlight class="normal">,<sp/>[BadNamedTuple]),</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;dict&quot;</highlight><highlight class="normal">,<sp/>[{</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">:<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">:<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;c&quot;</highlight><highlight class="normal">:<sp/>2}]),</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;set&quot;</highlight><highlight class="normal">,<sp/>[{</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;c&quot;</highlight><highlight class="normal">}]),</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classpysc2_1_1lib_1_1named__array__test_1_1_named_array_test_1ae88253c67fac6a047be8b7770aac3b43" kindref="member">test_bad_names</ref>(self,<sp/>names):</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>with<sp/>self.assertRaises(ValueError):</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpysc2_1_1lib_1_1named__array_1_1_named_numpy_array" kindref="compound">named_array.NamedNumpyArray</ref>([1,<sp/>3,<sp/>6],<sp/>names)</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>@parameterized.named_parameters(</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;list&quot;</highlight><highlight class="normal">,<sp/>[</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;c&quot;</highlight><highlight class="normal">]),</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;tuple&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;c&quot;</highlight><highlight class="normal">)),</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;list2&quot;</highlight><highlight class="normal">,<sp/>[[</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;c&quot;</highlight><highlight class="normal">]]),</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;tuple2&quot;</highlight><highlight class="normal">,<sp/>((</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;c&quot;</highlight><highlight class="normal">))),</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;list_tuple&quot;</highlight><highlight class="normal">,<sp/>[(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;c&quot;</highlight><highlight class="normal">)]),</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;named_tuple&quot;</highlight><highlight class="normal">,<sp/>TestNamedTuple),</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;named_tuple2&quot;</highlight><highlight class="normal">,<sp/>[TestNamedTuple]),</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;int_enum&quot;</highlight><highlight class="normal">,<sp/>TestEnum),</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;int_enum2&quot;</highlight><highlight class="normal">,<sp/>[TestEnum]),</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>)</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classpysc2_1_1lib_1_1named__array__test_1_1_named_array_test_1ad8b9ed61ee94a9eb08d42e6c3fc176f1" kindref="member">test_single_dimension</ref>(self,<sp/>names):</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>=<sp/><ref refid="classpysc2_1_1lib_1_1named__array_1_1_named_numpy_array" kindref="compound">named_array.NamedNumpyArray</ref>([1,<sp/>3,<sp/>6],<sp/>names)</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(a[0],<sp/>1)</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(a[1],<sp/>3)</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(a[2],<sp/>6)</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(a[-1],<sp/>6)</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(a.a,<sp/>1)</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(a.b,<sp/>3)</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(a.c,<sp/>6)</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>with<sp/>self.assertRaises(AttributeError):</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a.d<sp/><sp/></highlight><highlight class="comment">#<sp/>pylint:<sp/>disable=pointless-statement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(a[</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">],<sp/>1)</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(a[</highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">],<sp/>3)</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(a[</highlight><highlight class="stringliteral">&quot;c&quot;</highlight><highlight class="normal">],<sp/>6)</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>with<sp/>self.assertRaises(KeyError):</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a[</highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal">]<sp/><sp/></highlight><highlight class="comment">#<sp/>pylint:<sp/>disable=pointless-statement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classpysc2_1_1lib_1_1named__array__test_1_1_named_array_test_1a73012d8abe25bb19ab3a25d942f0c882" kindref="member">assertArrayEqual</ref>(a[0:2],<sp/>[1,<sp/>3])</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classpysc2_1_1lib_1_1named__array__test_1_1_named_array_test_1a73012d8abe25bb19ab3a25d942f0c882" kindref="member">assertArrayEqual</ref>(a[1:3],<sp/>[3,<sp/>6])</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classpysc2_1_1lib_1_1named__array__test_1_1_named_array_test_1a73012d8abe25bb19ab3a25d942f0c882" kindref="member">assertArrayEqual</ref>(a[0:2:],<sp/>[1,<sp/>3])</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classpysc2_1_1lib_1_1named__array__test_1_1_named_array_test_1a73012d8abe25bb19ab3a25d942f0c882" kindref="member">assertArrayEqual</ref>(a[0:2:1],<sp/>[1,<sp/>3])</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(a[1:3][0],<sp/>3)</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(a[1:3,<sp/>0],<sp/>3)</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(a[1:3].b,<sp/>3)</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(a[1:3].c,<sp/>6)</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>a[1]<sp/>=<sp/>4</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(a[1],<sp/>4)</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(a.b,<sp/>4)</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(a[</highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">],<sp/>4)</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>a[1:2]<sp/>=<sp/>2</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(a[1],<sp/>2)</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(a.b,<sp/>2)</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(a[</highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">],<sp/>2)</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>a.b<sp/>=<sp/>5</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(a[1],<sp/>5)</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(a.b,<sp/>5)</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(a[</highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">],<sp/>5)</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classpysc2_1_1lib_1_1named__array__test_1_1_named_array_test_1aa6bcf6475e28d44dcc0be98c966e3bb6" kindref="member">test_empty_array</ref>(self):</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpysc2_1_1lib_1_1named__array_1_1_named_numpy_array" kindref="compound">named_array.NamedNumpyArray</ref>([],<sp/>[</highlight><highlight class="keywordtype">None</highlight><highlight class="normal">,<sp/>[</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">]])</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>with<sp/>self.assertRaises(ValueError):</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Must<sp/>be<sp/>the<sp/>right<sp/>length.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpysc2_1_1lib_1_1named__array_1_1_named_numpy_array" kindref="compound">named_array.NamedNumpyArray</ref>([],<sp/>[[</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">]])</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>with<sp/>self.assertRaises(ValueError):</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Returning<sp/>an<sp/>empty<sp/>slice<sp/>is<sp/>not<sp/>supported,<sp/>and<sp/>it&apos;s<sp/>not<sp/>clear<sp/>how<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>even<sp/>if<sp/>it<sp/>should<sp/>be<sp/>supported.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpysc2_1_1lib_1_1named__array_1_1_named_numpy_array" kindref="compound">named_array.NamedNumpyArray</ref>([],<sp/>[[</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">],<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">])</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classpysc2_1_1lib_1_1named__array__test_1_1_named_array_test_1a57f23c7030de95d56d2961b71b3bb717" kindref="member">test_named_array_multi_first</ref>(self):</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>=<sp/><ref refid="classpysc2_1_1lib_1_1named__array_1_1_named_numpy_array" kindref="compound">named_array.NamedNumpyArray</ref>([[1,<sp/>3],<sp/>[6,<sp/>8]],<sp/>[[</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">],<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">])</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classpysc2_1_1lib_1_1named__array__test_1_1_named_array_test_1a73012d8abe25bb19ab3a25d942f0c882" kindref="member">assertArrayEqual</ref>(a.a,<sp/>[1,<sp/>3])</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classpysc2_1_1lib_1_1named__array__test_1_1_named_array_test_1a73012d8abe25bb19ab3a25d942f0c882" kindref="member">assertArrayEqual</ref>(a[1],<sp/>[6,<sp/>8])</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classpysc2_1_1lib_1_1named__array__test_1_1_named_array_test_1a73012d8abe25bb19ab3a25d942f0c882" kindref="member">assertArrayEqual</ref>(a[</highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">],<sp/>[6,<sp/>8])</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(a[0,<sp/>1],<sp/>3)</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(a[</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">,<sp/>0],<sp/>1)</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(a[</highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">,<sp/>0],<sp/>6)</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(a[</highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">,<sp/>1],<sp/>8)</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(a.a[0],<sp/>1)</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>with<sp/>self.assertRaises(TypeError):</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a[0].a<sp/><sp/></highlight><highlight class="comment">#<sp/>pylint:<sp/>disable=pointless-statement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classpysc2_1_1lib_1_1named__array__test_1_1_named_array_test_1afd376f0b0a9b94dabc41b03419fbf334" kindref="member">test_named_array_multi_second</ref>(self):</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>=<sp/><ref refid="classpysc2_1_1lib_1_1named__array_1_1_named_numpy_array" kindref="compound">named_array.NamedNumpyArray</ref>([[1,<sp/>3],<sp/>[6,<sp/>8]],<sp/>[</highlight><highlight class="keywordtype">None</highlight><highlight class="normal">,<sp/>[</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">]])</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classpysc2_1_1lib_1_1named__array__test_1_1_named_array_test_1a73012d8abe25bb19ab3a25d942f0c882" kindref="member">assertArrayEqual</ref>(a[0],<sp/>[1,<sp/>3])</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(a[0,<sp/>1],<sp/>3)</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(a[0,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">],<sp/>1)</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(a[0,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">],<sp/>3)</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(a[1,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">],<sp/>8)</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(a[0].a,<sp/>1)</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>with<sp/>self.assertRaises(TypeError):</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a.a<sp/><sp/></highlight><highlight class="comment">#<sp/>pylint:<sp/>disable=pointless-statement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classpysc2_1_1lib_1_1named__array__test_1_1_named_array_test_1a4f1423d62d663f90674af8dbfa6162cf" kindref="member">test_string</ref>(self):</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>=<sp/><ref refid="classpysc2_1_1lib_1_1named__array_1_1_named_numpy_array" kindref="compound">named_array.NamedNumpyArray</ref>([1,<sp/>3,<sp/>6],<sp/>[</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;c&quot;</highlight><highlight class="normal">],<sp/>dtype=np.int32)</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(str(a),<sp/></highlight><highlight class="stringliteral">&quot;[1<sp/>3<sp/>6]&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(repr(a),<sp/>(</highlight><highlight class="stringliteral">&quot;NamedNumpyArray([1,<sp/>3,<sp/>6],<sp/>[&apos;a&apos;,<sp/>&apos;b&apos;,<sp/>&apos;c&apos;],<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;dtype=int32)&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>=<sp/><ref refid="classpysc2_1_1lib_1_1named__array_1_1_named_numpy_array" kindref="compound">named_array.NamedNumpyArray</ref>([[1,<sp/>3],<sp/>[6,<sp/>8]],<sp/>[</highlight><highlight class="keywordtype">None</highlight><highlight class="normal">,<sp/>[</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">]])</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(str(a),<sp/></highlight><highlight class="stringliteral">&quot;[[1<sp/>3]\n<sp/>[6<sp/>8]]&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(repr(a),<sp/>(</highlight><highlight class="stringliteral">&quot;NamedNumpyArray([[1,<sp/>3],\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[6,<sp/>8]],<sp/>[None,<sp/>[&apos;a&apos;,<sp/>&apos;b&apos;]])&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>=<sp/><ref refid="classpysc2_1_1lib_1_1named__array_1_1_named_numpy_array" kindref="compound">named_array.NamedNumpyArray</ref>([[1,<sp/>3],<sp/>[6,<sp/>8]],<sp/>[[</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">],<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">])</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(str(a),<sp/></highlight><highlight class="stringliteral">&quot;[[1<sp/>3]\n<sp/>[6<sp/>8]]&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(repr(a),<sp/>(</highlight><highlight class="stringliteral">&quot;NamedNumpyArray([[1,<sp/>3],\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[6,<sp/>8]],<sp/>[[&apos;a&apos;,<sp/>&apos;b&apos;],<sp/>None])&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>=<sp/><ref refid="classpysc2_1_1lib_1_1named__array_1_1_named_numpy_array" kindref="compound">named_array.NamedNumpyArray</ref>([list(range(50))]<sp/>*<sp/>50,</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight><highlight class="keywordtype">None</highlight><highlight class="normal">,<sp/>[</highlight><highlight class="stringliteral">&quot;a%s&quot;</highlight><highlight class="normal"><sp/>%<sp/>i<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(50)]])</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertIn(</highlight><highlight class="stringliteral">&quot;49&quot;</highlight><highlight class="normal">,<sp/>str(a))</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertIn(</highlight><highlight class="stringliteral">&quot;49&quot;</highlight><highlight class="normal">,<sp/>repr(a))</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>=<sp/><ref refid="classpysc2_1_1lib_1_1named__array_1_1_named_numpy_array" kindref="compound">named_array.NamedNumpyArray</ref>([list(range(50))]<sp/>*<sp/>50,</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[[</highlight><highlight class="stringliteral">&quot;a%s&quot;</highlight><highlight class="normal"><sp/>%<sp/>i<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(50)],<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">])</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertIn(</highlight><highlight class="stringliteral">&quot;49&quot;</highlight><highlight class="normal">,<sp/>str(a))</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertIn(</highlight><highlight class="stringliteral">&quot;49&quot;</highlight><highlight class="normal">,<sp/>repr(a))</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>__name__<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;__main__&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>absltest.main()</highlight></codeline>
    </programlisting>
    <location file="lib/named_array_test.py"/>
  </compounddef>
</doxygen>
