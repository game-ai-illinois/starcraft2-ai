<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="point__test_8py" kind="file" language="Python">
    <compoundname>point_test.py</compoundname>
    <innerclass refid="classpysc2_1_1lib_1_1point__test_1_1_fake_point" prot="public">pysc2::lib::point_test::FakePoint</innerclass>
    <innerclass refid="classpysc2_1_1lib_1_1point__test_1_1_point_test" prot="public">pysc2::lib::point_test::PointTest</innerclass>
    <innerclass refid="classpysc2_1_1lib_1_1point__test_1_1_rect_test" prot="public">pysc2::lib::point_test::RectTest</innerclass>
    <innernamespace refid="namespacepysc2_1_1lib_1_1point__test">pysc2::lib::point_test</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespacepysc2_1_1lib_1_1point__test" refkind="compound"><highlight class="comment">#!/usr/bin/python</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Copyright<sp/>2017<sp/>Google<sp/>Inc.<sp/>All<sp/>Rights<sp/>Reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">#<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">#<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">#<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS-IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">#<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">#<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">#<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;&quot;&quot;Tests<sp/>for<sp/>the<sp/>point<sp/>library.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>__future__<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>absolute_import</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>__future__<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>division</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>__future__<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>print_function</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>absl.testing<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>absltest</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>future.builtins<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>int<sp/><sp/></highlight><highlight class="comment">#<sp/>pylint:<sp/>disable=redefined-builtin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacepysc2_1_1lib" kindref="compound">pysc2.lib</ref><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>point</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="classpysc2_1_1lib_1_1point__test_1_1_fake_point" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpysc2_1_1lib_1_1point__test_1_1_fake_point" kindref="compound">FakePoint</ref>(object):</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classpysc2_1_1lib_1_1point__test_1_1_fake_point_1a477a3ccac64bf883f4302776c25e64fd" kindref="member">__init__</ref>(self):</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classpysc2_1_1lib_1_1point__test_1_1_fake_point_1af44ff09f18ad5a5f4788e5d0cc8e28aa" kindref="member">x</ref><sp/>=<sp/>5</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classpysc2_1_1lib_1_1point__test_1_1_fake_point_1abdf10860fd63baac01c2c3e12833876b" kindref="member">y</ref><sp/>=<sp/>8</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="classpysc2_1_1lib_1_1point__test_1_1_point_test" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpysc2_1_1lib_1_1point__test_1_1_point_test" kindref="compound">PointTest</ref>(absltest.TestCase):</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classpysc2_1_1lib_1_1point__test_1_1_point_test_1ad12a19dcb832316fa8d1f886a7170ee3" kindref="member">testBuild</ref>(self):</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(<ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(5,<sp/>8),<sp/>point.Point.build(<ref refid="classpysc2_1_1lib_1_1point__test_1_1_fake_point" kindref="compound">FakePoint</ref>()))</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classpysc2_1_1lib_1_1point__test_1_1_point_test_1a437c584557a8bd89608f4d2b7031772d" kindref="member">testAssignTo</ref>(self):</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>f<sp/>=<sp/><ref refid="classpysc2_1_1lib_1_1point__test_1_1_fake_point" kindref="compound">FakePoint</ref>()</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(5,<sp/>f.x)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(8,<sp/>f.y)</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(1,<sp/>2).assign_to(f)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(1,<sp/>f.x)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(2,<sp/>f.y)</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classpysc2_1_1lib_1_1point__test_1_1_point_test_1a859a1f0935cc6fb30847cce427f8e86c" kindref="member">testDist</ref>(self):</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>=<sp/><ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(1,<sp/>1)</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>=<sp/><ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(4,<sp/>5)</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(5,<sp/>a.dist(b))</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classpysc2_1_1lib_1_1point__test_1_1_point_test_1aea852a2f277b80c7ce0284529566d060" kindref="member">testDistSq</ref>(self):</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>=<sp/><ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(1,<sp/>1)</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>=<sp/><ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(4,<sp/>5)</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(25,<sp/>a.dist_sq(b))</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classpysc2_1_1lib_1_1point__test_1_1_point_test_1a30da6dc96b15c2ca483ee8fa9f523547" kindref="member">testLen</ref>(self):</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/><ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(3,<sp/>4)</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(5,<sp/>p.len())</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classpysc2_1_1lib_1_1point__test_1_1_point_test_1ab3fac4980cacfe3de6798039647a1e57" kindref="member">testScale</ref>(self):</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/><ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(3,<sp/>4)</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertAlmostEqual(2,<sp/>p.scale(2).len())</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classpysc2_1_1lib_1_1point__test_1_1_point_test_1ad83d5d0d2bd253f254e7f88c2267f9b1" kindref="member">testScaleMaxSize</ref>(self):</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/><ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(3,<sp/>4)</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(p,<sp/>p.scale_max_size(p))</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(<ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(6,<sp/>8),<sp/>p.scale_max_size(<ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(8,<sp/>8)))</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(<ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(6,<sp/>8),<sp/>p.scale_max_size(<ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(100,<sp/>8)))</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(<ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(6,<sp/>8),<sp/>p.scale_max_size(<ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(6,<sp/>100)))</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classpysc2_1_1lib_1_1point__test_1_1_point_test_1a4a1bbfdbfcb124ef6711f9f80e74751d" kindref="member">testScaleMinSize</ref>(self):</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/><ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(3,<sp/>4)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(p,<sp/>p.scale_min_size(p))</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(<ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(6,<sp/>8),<sp/>p.scale_min_size(<ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(6,<sp/>6)))</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(<ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(6,<sp/>8),<sp/>p.scale_min_size(<ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(2,<sp/>8)))</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(<ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(6,<sp/>8),<sp/>p.scale_min_size(<ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(6,<sp/>2)))</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classpysc2_1_1lib_1_1point__test_1_1_point_test_1ad410f51e3943e335b48988c43ae29292" kindref="member">testMinDim</ref>(self):</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(5,<sp/><ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(5,<sp/>10).min_dim())</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classpysc2_1_1lib_1_1point__test_1_1_point_test_1a02721028156d77d78a3b40b0f4728f17" kindref="member">testMaxDim</ref>(self):</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(10,<sp/><ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(5,<sp/>10).max_dim())</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classpysc2_1_1lib_1_1point__test_1_1_point_test_1af76618e86853e5aaa46189849b05fba8" kindref="member">testTranspose</ref>(self):</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(<ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(4,<sp/>3),<sp/><ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(3,<sp/>4).transpose())</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classpysc2_1_1lib_1_1point__test_1_1_point_test_1ad68fffc4b5078c5994109db0e261929e" kindref="member">testRound</ref>(self):</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/><ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(1.3,<sp/>2.6).round()</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(<ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(1,<sp/>3),<sp/>p)</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertIsInstance(p.x,<sp/>int)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertIsInstance(p.y,<sp/>int)</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classpysc2_1_1lib_1_1point__test_1_1_point_test_1a17b74dbbc38f4de18338b1ac5c3345cc" kindref="member">testCeil</ref>(self):</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/><ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(1.3,<sp/>2.6).ceil()</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(<ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(2,<sp/>3),<sp/>p)</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertIsInstance(p.x,<sp/>int)</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertIsInstance(p.y,<sp/>int)</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classpysc2_1_1lib_1_1point__test_1_1_point_test_1a078ea743680d548a84054a49214c750b" kindref="member">testFloor</ref>(self):</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/><ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(1.3,<sp/>2.6).floor()</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(<ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(1,<sp/>2),<sp/>p)</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertIsInstance(p.x,<sp/>int)</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertIsInstance(p.y,<sp/>int)</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classpysc2_1_1lib_1_1point__test_1_1_point_test_1ae34b180630e932d59d61d7c0925473c5" kindref="member">testRotate</ref>(self):</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/><ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(0,<sp/>100)</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(<ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(-100,<sp/>0),<sp/>p.rotate_deg(90).round())</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(<ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(100,<sp/>0),<sp/>p.rotate_deg(-90).round())</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(<ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(0,<sp/>-100),<sp/>p.rotate_deg(180).round())</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classpysc2_1_1lib_1_1point__test_1_1_point_test_1a7b34a7d475a708d56c3f8e42643a6eea" kindref="member">testContainedCircle</ref>(self):</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertTrue(<ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(2,<sp/>2).contained_circle(<ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(1,<sp/>1),<sp/>2))</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertFalse(<ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(2,<sp/>2).contained_circle(<ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(1,<sp/>1),<sp/>0.5))</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classpysc2_1_1lib_1_1point__test_1_1_point_test_1ae45d018988b644631a6be793de0a07a9" kindref="member">testBound</ref>(self):</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>tl<sp/>=<sp/><ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(1,<sp/>2)</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>br<sp/>=<sp/><ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(3,<sp/>4)</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(tl,<sp/><ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(0,<sp/>0).bound(tl,<sp/>br))</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(br,<sp/><ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(10,<sp/>10).bound(tl,<sp/>br))</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(<ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(1.5,<sp/>2),<sp/><ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(1.5,<sp/>0).bound(tl,<sp/>br))</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124" refid="classpysc2_1_1lib_1_1point__test_1_1_rect_test" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpysc2_1_1lib_1_1point__test_1_1_rect_test" kindref="compound">RectTest</ref>(absltest.TestCase):</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classpysc2_1_1lib_1_1point__test_1_1_rect_test_1a893ea1a07df964e737f34350d0d9c9e1" kindref="member">testInit</ref>(self):</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/><ref refid="classpysc2_1_1lib_1_1point_1_1_rect" kindref="compound">point.Rect</ref>(1,<sp/>2,<sp/>3,<sp/>4)</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(r.t,<sp/>1)</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(r.l,<sp/>2)</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(r.b,<sp/>3)</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(r.r,<sp/>4)</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(r.tl,<sp/><ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(2,<sp/>1))</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(r.tr,<sp/><ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(4,<sp/>1))</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(r.bl,<sp/><ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(2,<sp/>3))</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(r.br,<sp/><ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(4,<sp/>3))</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classpysc2_1_1lib_1_1point__test_1_1_rect_test_1a0aba50946172b2be4f7132c35717e0ac" kindref="member">testInitBad</ref>(self):</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>with<sp/>self.assertRaises(TypeError):</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpysc2_1_1lib_1_1point_1_1_rect" kindref="compound">point.Rect</ref>(4,<sp/>3,<sp/>2,<sp/>1)<sp/><sp/></highlight><highlight class="comment">#<sp/>require<sp/>t<sp/>&lt;=<sp/>b,<sp/>l<sp/>&lt;=<sp/>r</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>with<sp/>self.assertRaises(TypeError):</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpysc2_1_1lib_1_1point_1_1_rect" kindref="compound">point.Rect</ref>(1)</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>with<sp/>self.assertRaises(TypeError):</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpysc2_1_1lib_1_1point_1_1_rect" kindref="compound">point.Rect</ref>(1,<sp/>2,<sp/>3)</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>with<sp/>self.assertRaises(TypeError):</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpysc2_1_1lib_1_1point_1_1_rect" kindref="compound">point.Rect</ref>()</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classpysc2_1_1lib_1_1point__test_1_1_rect_test_1a49ea48bb22c49707212243ebd03ce7e6" kindref="member">testInitOnePoint</ref>(self):</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/><ref refid="classpysc2_1_1lib_1_1point_1_1_rect" kindref="compound">point.Rect</ref>(<ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(1,<sp/>2))</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(r.t,<sp/>0)</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(r.l,<sp/>0)</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(r.b,<sp/>2)</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(r.r,<sp/>1)</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(r.tl,<sp/><ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(0,<sp/>0))</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(r.tr,<sp/><ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(1,<sp/>0))</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(r.bl,<sp/><ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(0,<sp/>2))</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(r.br,<sp/><ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(1,<sp/>2))</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(r.size,<sp/><ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(1,<sp/>2))</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(r.center,<sp/><ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(1,<sp/>2)<sp/>/<sp/>2)</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(r.area,<sp/>2)</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classpysc2_1_1lib_1_1point__test_1_1_rect_test_1ab9a05e0bcf244c014345d6d9b7436d09" kindref="member">testInitTwoPoints</ref>(self):</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/><ref refid="classpysc2_1_1lib_1_1point_1_1_rect" kindref="compound">point.Rect</ref>(<ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(1,<sp/>2),<sp/><ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(3,<sp/>4))</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(r.t,<sp/>2)</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(r.l,<sp/>1)</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(r.b,<sp/>4)</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(r.r,<sp/>3)</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(r.tl,<sp/><ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(1,<sp/>2))</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(r.tr,<sp/><ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(3,<sp/>2))</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(r.bl,<sp/><ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(1,<sp/>4))</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(r.br,<sp/><ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(3,<sp/>4))</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(r.size,<sp/><ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(2,<sp/>2))</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(r.center,<sp/><ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(2,<sp/>3))</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(r.area,<sp/>4)</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classpysc2_1_1lib_1_1point__test_1_1_rect_test_1ae98ee95a8e5ce8f489ba137baeb0ec2b" kindref="member">testInitTwoPointsReversed</ref>(self):</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/><ref refid="classpysc2_1_1lib_1_1point_1_1_rect" kindref="compound">point.Rect</ref>(<ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(3,<sp/>4),<sp/><ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(1,<sp/>2))</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(r.t,<sp/>2)</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(r.l,<sp/>1)</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(r.b,<sp/>4)</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(r.r,<sp/>3)</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(r.tl,<sp/><ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(1,<sp/>2))</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(r.tr,<sp/><ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(3,<sp/>2))</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(r.bl,<sp/><ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(1,<sp/>4))</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(r.br,<sp/><ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(3,<sp/>4))</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(r.size,<sp/><ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(2,<sp/>2))</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(r.center,<sp/><ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(2,<sp/>3))</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(r.area,<sp/>4)</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classpysc2_1_1lib_1_1point__test_1_1_rect_test_1a4c21de209a3a55328d9e18e395a4dc60" kindref="member">testArea</ref>(self):</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/><ref refid="classpysc2_1_1lib_1_1point_1_1_rect" kindref="compound">point.Rect</ref>(<ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(1,<sp/>1),<sp/><ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(3,<sp/>4))</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(r.area,<sp/>6)</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classpysc2_1_1lib_1_1point__test_1_1_rect_test_1a80deb542f38aab65a18e3cc76c7ece1d" kindref="member">testContains</ref>(self):</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/><ref refid="classpysc2_1_1lib_1_1point_1_1_rect" kindref="compound">point.Rect</ref>(<ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(1,<sp/>1),<sp/><ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(3,<sp/>3))</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertTrue(r.contains_point(<ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(2,<sp/>2)))</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertFalse(r.contains_circle(<ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(2,<sp/>2),<sp/>5))</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertFalse(r.contains_point(<ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(4,<sp/>4)))</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertFalse(r.contains_circle(<ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(4,<sp/>4),<sp/>5))</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classpysc2_1_1lib_1_1point__test_1_1_rect_test_1a7238871e6257d01a82844ac7bac60eac" kindref="member">testIntersectsCircle</ref>(self):</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/><ref refid="classpysc2_1_1lib_1_1point_1_1_rect" kindref="compound">point.Rect</ref>(<ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(1,<sp/>1),<sp/><ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(3,<sp/>3))</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertFalse(r.intersects_circle(<ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(0,<sp/>0),<sp/>0.5))</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertFalse(r.intersects_circle(<ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(0,<sp/>0),<sp/>1))</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertTrue(r.intersects_circle(<ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(0,<sp/>0),<sp/>1.5))</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertTrue(r.intersects_circle(<ref refid="classpysc2_1_1lib_1_1point_1_1_point" kindref="compound">point.Point</ref>(0,<sp/>0),<sp/>2))</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>__name__<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;__main__&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>absltest.main()</highlight></codeline>
    </programlisting>
    <location file="lib/point_test.py"/>
  </compounddef>
</doxygen>
